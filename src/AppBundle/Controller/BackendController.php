<?php

namespace AppBundle\Controller;

use Sensio\Bundle\FrameworkExtraBundle\Configuration\Route;
use Symfony\Bundle\FrameworkBundle\Controller\Controller;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\HttpFoundation\RedirectResponse;

class BackendController extends Controller
{
    /**
     * @Route("/backend", name="backend")
     */
    public function indexAction(Request $request)
    {
        return $this->render('AppBundle:Backend:index.html.twig', array());
    }

    /**
     * @Route("/backend/import", name="backend_import")
     */
    public function importAction(Request $request)
    {
        if($request->getMethod() == 'POST' && $request->files->get('fileToUpload') != null) {
            $SPSS = new \SPSSReader($request->files->get('fileToUpload')->getPathname());
            //$this->container->get('spss.importer')->import($SPSS, $request->files->get('fileToUpload')->getClientOriginalName());

            return $this->render('AppBundle:Backend:import_results.html.twig', array(
                'filename' => $request->files->get('fileToUpload')->getClientOriginalName(),
                'spss' => $SPSS,
            ));
        }
        return $this->render('AppBundle:Backend:import.html.twig', array());
    }

    /**
     * @Route("/backend/export", name="backend_export")
     */
    public function exportAction(Request $request)
    {
        if($this->getRequest()->get('token') != $this->container->getParameter('export_token')) {
            echo 'Wrong token'; die();
        }
        $data = array();
        $questions = $this->container->get('doctrine')->getManager()->createQuery('SELECT q FROM AppBundle\Entity\Question q INDEX BY q.id')->getResult();
        $userAnswers = $this->container->get('doctrine')->getManager()->createQuery('SELECT ua FROM AppBundle\Entity\UserAnswer ua JOIN ua.user u WHERE u.autoGenerated = :f')->setParameter('f', false)->getResult();
        $columns = array(
            'Time',
            'SessionId',
        );
        foreach($questions as $curQuestion) {
            $columns[] = $curQuestion->getQuestion();
        }
        foreach($userAnswers as $curAnswer) {
            if(isset($data[$curAnswer->getUser()->getSessionId()])) {
                $curData = $data[$curAnswer->getUser()->getSessionId()];
            } else {
                $curData = array_fill(0, count($questions)+2, '');
                $curData[0] = $curAnswer->getTime()->format('d-m-Y H:i:s');
                $curData[1] = $curAnswer->getUser()->getSessionId();
            }
            $answerIndex = array_search($curAnswer->getAnswer()->getQuestion()->getQuestion(), $columns);
            $curData[$answerIndex] = $curAnswer->getAnswer()->getAnswer();
            $data[$curAnswer->getUser()->getSessionId()] = $curData;
        }
        $response = new CSVResponse( array_merge(array($columns), $data), 200 );
        $response->setFilename( "data.csv" );
        return $response;
    }
}

class CsvResponse extends Response
{
    protected $data;
    protected $filename = 'export.csv';
    public function __construct($data = array(), $status = 200, $headers = array())
    {
        parent::__construct('', $status, $headers);
        $this->setData($data);
    }
    public function setData(array $data)
    {
        $output = fopen('php://temp', 'r+');
        foreach ($data as $row) {
            fputcsv($output, $row);
        }
        rewind($output);
        $this->data = '';
        while ($line = fgets($output)) {
            $this->data .= $line;
        }
        $this->data .= fgets($output);
        return $this->update();
    }
    public function getFilename()
    {
        return $this->filename;
    }
    public function setFilename($filename)
    {
        $this->filename = $filename;
        return $this->update();
    }
    protected function update()
    {
        $this->headers->set('Content-Disposition', sprintf('attachment; filename="%s"', $this->filename));
        if (!$this->headers->has('Content-Type')) {
            $this->headers->set('Content-Type', 'text/csv');
        }
        return $this->setContent($this->data);
    }
}
